**** Composite Pattern ****
This pattern allows the client to treat objects or lists of objects uniformly, in order to treat the entire structure
as one component. Consider a GUI. Each component has other components within it, but you want to treat the entire
UI as one distinct entity. When you call display, the components can call display on its sub components, and if its
sub component is a leaf (i.e. a text box, button, etc) they can physically display themselves on the screen.

The iterator pattern is used in conjunction with this pattern frequently, as objects holding lists can have multiple
different implementations (hash table, array, list, etc). Using an iterator abstracts that away from the client, and
allows them to use a if(iter.hasNext()) -> iter.next() model.

**** Textbook Definition ****
The composite pattern describes a group of objects that is treated the same way as a single instance of the same type
of object. The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies.
Implementing the composite pattern lets clients treat individual objects and compositions uniformly.